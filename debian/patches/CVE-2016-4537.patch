Backport of:

From d650063a0457aec56364e4005a636dc6c401f9cd Mon Sep 17 00:00:00 2001
From: Stanislav Malyshev <stas@php.net>
Date: Sun, 24 Apr 2016 18:33:32 -0700
Subject: [PATCH] Fix bug #72093: bcpowmod accepts negative scale and corrupts
 _one_ definition

We can not modify result since it can be copy of _zero_ or _one_, etc. and
"copy" in bcmath is just bumping the refcount.
---
 ext/bcmath/bcmath.c            | 60 +++++++++++++++++++++++++++++-------------
 ext/bcmath/tests/bug72093.phpt | 13 +++++++++
 main/php_version.h             |  6 ++---
 3 files changed, 57 insertions(+), 22 deletions(-)
 create mode 100644 ext/bcmath/tests/bug72093.phpt

Index: php7.0-7.0.4/ext/bcmath/bcmath.c
===================================================================
--- php7.0-7.0.4.orig/ext/bcmath/bcmath.c	2016-05-17 13:07:51.219005544 -0400
+++ php7.0-7.0.4/ext/bcmath/bcmath.c	2016-05-17 13:09:30.204272889 -0400
@@ -207,6 +207,21 @@
 }
 /* }}} */
 
+/* {{{ split_bc_num
+   Convert to bc_num detecting scale */
+static bc_num split_bc_num(bc_num num) {
+	bc_num newnum;
+	if (num->n_refs >= 1) {
+		return num;
+	}
+	newnum = _bc_new_num_ex(0, 0, 0);
+	*newnum = *num;
+	newnum->n_refs = 1;
+	num->n_refs--;
+	return newnum;
+}
+/* }}} */
+
 /* {{{ proto string bcadd(string left_operand, string right_operand [, int scale])
    Returns the sum of two arbitrary precision numbers */
 PHP_FUNCTION(bcadd)
@@ -233,6 +248,7 @@
 	bc_add (first, second, &result, scale);
 
 	if (result->n_scale > scale) {
+		result = split_bc_num(result);
 		result->n_scale = scale;
 	}
 
@@ -270,6 +286,7 @@
 	bc_sub (first, second, &result, scale);
 
 	if (result->n_scale > scale) {
+		result = split_bc_num(result);
 		result->n_scale = scale;
 	}
 
@@ -307,6 +324,7 @@
 	bc_multiply (first, second, &result, scale);
 
 	if (result->n_scale > scale) {
+		result = split_bc_num(result);
 		result->n_scale = scale;
 	}
 
@@ -345,6 +363,7 @@
 	switch (bc_divide(first, second, &result, scale)) {
 		case 0: /* OK */
 			if (result->n_scale > scale) {
+				result = split_bc_num(result);
 				result->n_scale = scale;
 			}
 			RETVAL_STR(bc_num2str(result));
@@ -420,8 +439,9 @@
 	scale_int = (int) ((int)scale < 0 ? 0 : scale);
 
 	if (bc_raisemod(first, second, mod, &result, scale_int) != -1) {
-		if (result->n_scale > scale) {
-			result->n_scale = (int)scale;
+		if (result->n_scale > scale_int) {
+			result = split_bc_num(result);
+			result->n_scale = scale_int;
 		}
 		RETVAL_STR(bc_num2str(result));
 	} else {
@@ -462,6 +482,7 @@
 	bc_raise (first, second, &result, scale);
 
 	if (result->n_scale > scale) {
+		result = split_bc_num(result);
 		result->n_scale = scale;
 	}
 
@@ -496,6 +517,7 @@
 
 	if (bc_sqrt (&result, scale) != 0) {
 		if (result->n_scale > scale) {
+			result = split_bc_num(result);
 			result->n_scale = scale;
 		}
 		RETVAL_STR(bc_num2str(result));
Index: php7.0-7.0.4/ext/bcmath/tests/bug72093.phpt
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ php7.0-7.0.4/ext/bcmath/tests/bug72093.phpt	2016-05-17 13:07:51.215005492 -0400
@@ -0,0 +1,13 @@
+--TEST--
+Bug 72093: bcpowmod accepts negative scale and corrupts _one_ definition
+--SKIPIF--
+<?php if(!extension_loaded("bcmath")) print "skip"; ?>
+--FILE--
+<?php
+var_dump(bcpowmod(1, "A", 128, -200));
+var_dump(bcpowmod(1, 1.2, 1, 1));
+?>
+--EXPECTF--
+string(1) "1"
+bc math warning: non-zero scale in exponent
+string(3) "0.0"
