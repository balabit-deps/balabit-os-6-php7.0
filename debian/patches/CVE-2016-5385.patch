Description: fix proxy request header vulnerability (httpoxy)
Origin: backport, http://git.php.net/?p=php-src.git;a=commit;h=98b9dfaec95e6f910f125ed172cdbd25abd006ec
Origin: backport, http://git.php.net/?p=php-src.git;a=commit;h=9ebc96116b609cd3c969c2d5a460aaa904c2afec
Origin: backport, http://git.php.net/?p=php-src.git;a=commit;h=b00f8f2a5bae651d6375ca34c676963f1f25ee5a
Bug: https://bugs.php.net/bug.php?id=72573

Index: php7.0-7.0.8/ext/standard/basic_functions.c
===================================================================
--- php7.0-7.0.8.orig/ext/standard/basic_functions.c	2016-06-21 15:57:38.000000000 -0400
+++ php7.0-7.0.8/ext/standard/basic_functions.c	2016-07-27 07:48:56.447285232 -0400
@@ -632,8 +632,9 @@
 	ZEND_ARG_INFO(0, proper_address)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(arginfo_getenv, 0)
+ZEND_BEGIN_ARG_INFO_EX(arginfo_getenv, 0, 0, 1)
 	ZEND_ARG_INFO(0, varname)
+	ZEND_ARG_INFO(0, local_only)
 ZEND_END_ARG_INFO()
 
 #ifdef HAVE_PUTENV
@@ -4009,24 +4010,27 @@
  * System Functions *
  ********************/
 
-/* {{{ proto string getenv(string varname)
+/* {{{ proto string getenv(string varname[, bool local_only])
    Get the value of an environment variable */
 PHP_FUNCTION(getenv)
 {
 	char *ptr, *str;
 	size_t str_len;
+	zend_bool local_only = 0;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &str, &str_len) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s|b", &str, &str_len, &local_only) == FAILURE) {
 		RETURN_FALSE;
 	}
 
-	/* SAPI method returns an emalloc()'d string */
-	ptr = sapi_getenv(str, str_len);
-	if (ptr) {
-		// TODO: avoid realocation ???
-		RETVAL_STRING(ptr);
-		efree(ptr);
-		return;
+	if (!local_only) {
+		/* SAPI method returns an emalloc()'d string */
+		ptr = sapi_getenv(str, str_len);
+		if (ptr) {
+			// TODO: avoid realocation ???
+			RETVAL_STRING(ptr);
+			efree(ptr);
+			return;
+		}
 	}
 #ifdef PHP_WIN32
 	{
Index: php7.0-7.0.8/main/SAPI.c
===================================================================
--- php7.0-7.0.8.orig/main/SAPI.c	2016-06-21 15:57:54.000000000 -0400
+++ php7.0-7.0.8/main/SAPI.c	2016-07-27 07:48:56.447285232 -0400
@@ -1020,6 +1020,10 @@
 
 SAPI_API char *sapi_getenv(char *name, size_t name_len)
 {
+	if (!strncasecmp(name, "HTTP_PROXY", name_len)) {
+		/* Ugly fix for HTTP_PROXY issue, see bug #72573 */
+		return NULL;
+	}
 	if (sapi_module.getenv) {
 		char *value, *tmp = sapi_module.getenv(name, name_len);
 		if (tmp) {
Index: php7.0-7.0.8/main/php_variables.c
===================================================================
--- php7.0-7.0.8.orig/main/php_variables.c	2016-06-21 15:57:55.000000000 -0400
+++ php7.0-7.0.8/main/php_variables.c	2016-07-27 07:48:56.447285232 -0400
@@ -730,6 +730,22 @@
 	return 0; /* don't rearm */
 }
 
+/* Upgly hack to fix HTTP_PROXY issue, see bug #72573 */
+static void check_http_proxy(HashTable *var_table)
+{
+	if (zend_hash_str_exists(var_table, "HTTP_PROXY", sizeof("HTTP_PROXY")-1)) {
+		char *local_proxy = getenv("HTTP_PROXY");
+
+		if (!local_proxy) {
+			zend_hash_str_del(var_table, "HTTP_PROXY", sizeof("HTTP_PROXY")-1);
+		} else {
+			zval local_zval;
+			ZVAL_STRING(&local_zval, local_proxy);
+			zend_hash_str_update(var_table, "HTTP_PROXY", sizeof("HTTP_PROXY")-1, &local_zval);
+		}
+	}
+}
+
 static zend_bool php_auto_globals_create_server(zend_string *name)
 {
 	if (PG(variables_order) && (strchr(PG(variables_order),'S') || strchr(PG(variables_order),'s'))) {
@@ -755,6 +771,7 @@
 		array_init(&PG(http_globals)[TRACK_VARS_SERVER]);
 	}
 
+	check_http_proxy(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]));
 	zend_hash_update(&EG(symbol_table), name, &PG(http_globals)[TRACK_VARS_SERVER]);
 	Z_ADDREF(PG(http_globals)[TRACK_VARS_SERVER]);
 
@@ -770,6 +787,7 @@
 		php_import_environment_variables(&PG(http_globals)[TRACK_VARS_ENV]);
 	}
 
+	check_http_proxy(Z_ARRVAL(PG(http_globals)[TRACK_VARS_ENV]));
 	zend_hash_update(&EG(symbol_table), name, &PG(http_globals)[TRACK_VARS_ENV]);
 	Z_ADDREF(PG(http_globals)[TRACK_VARS_ENV]);
 
